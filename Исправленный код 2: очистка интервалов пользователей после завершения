from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import asyncio

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –¢–û–ö–ï–ù –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

class Form(StatesGroup):
    waiting_for_custom_interval = State()

user_intervals = {}

def get_interval_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text="‚è± 1 —Å–µ–∫", callback_data="set_interval_1")).adjust(1)
    keyboard.add(types.InlineKeyboardButton(text="‚è± 3 —Å–µ–∫", callback_data="set_interval_3")).adjust(1)
    keyboard.add(types.InlineKeyboardButton(text="‚è± 5 —Å–µ–∫", callback_data="set_interval_5")).adjust(1)
    keyboard.add(types.InlineKeyboardButton(text="‚è± 10 —Å–µ–∫", callback_data="set_interval_10")).adjust(1)
    keyboard.add(types.InlineKeyboardButton(text="‚è± 30 —Å–µ–∫", callback_data="set_interval_30")).adjust(1)
    keyboard.add(types.InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="set_custom_interval")).adjust(1)
    return keyboard.as_markup()

async def handle_question_5(message: types.Message):
    await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=get_interval_keyboard())

@dp.message(Command(commands=["set_interval"]))
async def set_interval_command(message: types.Message):
    await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=get_interval_keyboard())

@dp.callback_query(lambda c: c.data.startswith("set_interval_"))
async def set_interval(callback_query: types.CallbackQuery):
    interval = int(callback_query.data.split("_")[-1])
    user_intervals[callback_query.from_user.id] = interval
    await callback_query.message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫—É–Ω–¥")

@dp.callback_query(lambda c: c.data == "set_custom_interval")
async def custom_interval(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ (1-100 —Å–µ–∫—É–Ω–¥):")
    await state.set_state(Form.waiting_for_custom_interval)

@dp.message(Form.waiting_for_custom_interval)
async def process_custom_interval(message: types.Message, state: FSMContext):
    try:
        interval = int(message.text)
        if 1 <= interval <= 100:
            user_intervals[message.from_user.id] = interval
            await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫—É–Ω–¥")
            await state.clear()
        else:
            await message.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –æ—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async def finish_work_command(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_intervals:
        del user_intervals[user_id]

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
