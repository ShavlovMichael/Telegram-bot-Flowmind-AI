from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import asyncio



# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –¢–û–ö–ï–ù –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine), –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
class Form(StatesGroup):
    waiting_for_custom_interval = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_intervals = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
def get_interval_keyboard():
    keyboard = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏, –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    keyboard.add(types.InlineKeyboardButton(
        text="‚è± 1 —Å–µ–∫",
        callback_data="set_interval_1"
    )).adjust(1)
    keyboard.add(types.InlineKeyboardButton(
        text="‚è± 3 —Å–µ–∫",
        callback_data="set_interval_3"
    )).adjust(1)
    keyboard.add(types.InlineKeyboardButton(
        text="‚è± 5 —Å–µ–∫",
        callback_data="set_interval_5"
    )).adjust(1)
    keyboard.add(types.InlineKeyboardButton(
        text="‚è± 10 —Å–µ–∫",
        callback_data="set_interval_10"
    )).adjust(1)
    keyboard.add(types.InlineKeyboardButton(
        text="‚è± 30 —Å–µ–∫",
        callback_data="set_interval_30"
    )).adjust(1)
    keyboard.add(types.InlineKeyboardButton(
        text="üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
        callback_data="set_custom_interval"
    )).adjust(1)
    return keyboard.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ5
async def handle_question_5(message: types.Message):
    await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=get_interval_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_interval
@dp.message(Command(commands=["set_interval"]))
async def set_interval_command(message: types.Message):
    await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=get_interval_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
@dp.callback_query(lambda c: c.data.startswith("set_interval_"))
async def set_interval(callback_query: types.CallbackQuery):
    interval = int(callback_query.data.split("_")[-1])
    user_intervals[callback_query.from_user.id] = interval
    await callback_query.message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫—É–Ω–¥")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
@dp.callback_query(lambda c: c.data == "set_custom_interval")
async def custom_interval(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ (1-100 —Å–µ–∫—É–Ω–¥):")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    await state.set_state(Form.waiting_for_custom_interval)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
@dp.message(Form.waiting_for_custom_interval)
async def process_custom_interval(message: types.Message, state: FSMContext):
    try:
        interval = int(message.text)
        if 1 <= interval <= 100:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_intervals[message.from_user.id] = interval
            await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫—É–Ω–¥")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            await state.clear()
        else:
            await message.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())
